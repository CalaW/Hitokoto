/**
 * @file hitotablecontroller.cpp
 * @author CalaW (maker_cc@foxmail.com)
 * @brief Controller to display a hitokoto multimap in a tableview
 * @version 0.1
 * @date 2021-08-07
 * 
 * some is generated by qt wizard
 * 
 */
#include "hitotablecontroller.h"
#include <QApplication>

HitoTableController::HitoTableController(QObject *parent) : QAbstractTableModel(parent)
{
    setHeaderData(0, Qt::Horizontal, tr("Time"));
    setHeaderData(1, Qt::Horizontal, tr("Type"));
    setHeaderData(2, Qt::Horizontal, tr("Content"));
    m_bIsByRange = false;
    m_Begin = Hitokoto::getConstBegin();
    m_End = Hitokoto::getConstEnd();
}

/**
 * @name rowCount
 * @brief count rows to display
 * 
 * @param parent 
 * @return int 
 */
int HitoTableController::rowCount(const QModelIndex& parent) const
{
    if (m_bIsByRange) {
        int cnt = 0;
        for (auto it = m_Begin; it != m_End; ++it) {
            cnt++;
        }
        return cnt;
    } else {
        return Hitokoto::size();
    }
}

/**
 * @name columnCount
 * @brief count column to display
 * 
 * @param parent 
 * @return int 
 */
int HitoTableController::columnCount(const QModelIndex & parent) const
{
    return 3;
}

/**
 * @name data
 * @brief return data to display
 * 
 * @param index 
 * @param role 
 * @return QVariant 
 */
QVariant HitoTableController::data(const QModelIndex& index, int role) const
{
    if (!index.isValid() || role != Qt::DisplayRole) {
        return QVariant();
    }

    auto it = m_Begin;
    for (int i = 0; i < index.row(); i++) {
        it++;
    }

    if (index.column() == 0) {
        return QString::fromStdString((*it).second->getTimeString());
    }
    if (index.column() == 1) {
        return QString::fromStdString((*it).second->getTypeString());
    }
    if (index.column() == 2) {
        return QString::fromStdString((*it).second->getContent());
    }

    return QVariant();
}

/**
 * @name setStartTime
 * @brief change end iterator when start time is set
 * 
 * @param start_time 
 */
void HitoTableController::setStartTime(const qint64 start_time) {
    m_lStartTime = start_time;
    m_End = Hitokoto::getLowerBound(start_time);
    emit dataChanged(index(0,0), index(rowCount(), columnCount()));
}

/**
 * @name setEndTime
 * @brief change start iterator when end time is set
 * 
 * @param end_time 
 */
void HitoTableController::setEndTime(const qint64 end_time) {
    m_lEndTime = end_time;
    m_Begin = Hitokoto::getUpperBound(end_time);
    emit dataChanged(index(0,0), index(rowCount(), columnCount()));
}

/**
 * @name setViewByRange
 * @brief change status when ViewByRange checkbox is clicked
 * 
 * @param by_range 
 */
void HitoTableController::setViewByRange(bool by_range) {
    m_bIsByRange = by_range;
    if (!m_bIsByRange) {
        m_Begin = Hitokoto::getConstBegin();
    }
    emit dataChanged(index(0,0), index(rowCount(), columnCount()));
}
